openapi: 3.0.0
info:
    description: Manage your FFTCG collection
    version: 0.1.0
    title: FFTCG collection
servers:
    - url: http://localhost:3000/api/v1
      description: local server
paths:
    /login/google:
        post:
            tags: [authentication]
            summary: Login with google
            requestBody:
                $ref: '#/components/requestBodies/google'
            responses:
                200:
                    $ref: '#/components/responses/user'
                201:
                    $ref: '#/components/responses/user'
                401:
                    $ref: '#/components/responses/invalidToken'
    /users/{userId}:
        get:
            tags: [user]
            summary: Find user by ID
            parameters:
                - name: userId
                  in: path
                  description: ID of user to return
                  example: 8987518b-f2bb-45e1-bbf7-4e6a35803149
                  required: true
                  schema:
                      type: string
                      format: uuid
                - $ref: '#/components/parameters/authorization'
            responses:
                200:
                    $ref: '#/components/responses/user'
                404:
                    $ref: '#/components/responses/notFound'
                400:
                    $ref: '#/components/responses/badRequest'
                401:
                    $ref: '#/components/responses/invalidToken'
    /cards:
        get:
            tags: [card]
            summary: Get all cards
            parameters:
                - $ref: '#/components/parameters/authorization'
                - $ref: '#/components/parameters/search'
                - $ref: '#/components/parameters/owned'
                - $ref: '#/components/parameters/perPage'
                - $ref: '#/components/parameters/page'
                - $ref: '#/components/parameters/types'
                - $ref: '#/components/parameters/elements'
                - $ref: '#/components/parameters/opus'
                - $ref: '#/components/parameters/rarities'
                - $ref: '#/components/parameters/categories'
                - $ref: '#/components/parameters/cost'
                - $ref: '#/components/parameters/power'
            responses:
                200:
                    $ref: '#/components/responses/cards'
                400:
                    $ref: '#/components/responses/badRequest'
                401:
                    $ref: '#/components/responses/invalidToken'
    /cards/{code}:
        get:
            tags: [card]
            summary: Find card by code
            parameters:
                - name: code
                  in: path
                  description: code of card to return
                  example: 1-011C
                  required: true
                  schema:
                      type: string
                - $ref: '#/components/parameters/authorization'
            responses:
                200:
                    $ref: '#/components/responses/card'
                404:
                    $ref: '#/components/responses/notFound'
                400:
                    $ref: '#/components/responses/badRequest'
                401:
                    $ref: '#/components/responses/invalidToken'
    /cards/{code}/add:
        post:
            tags: [card]
            summary: Add card to collection
            requestBody:
                $ref: '#/components/requestBodies/userCard'
            responses:
                200:
                    description: ok
                401:
                    $ref: '#/components/responses/invalidToken'
                404:
                    $ref: '#/components/responses/notFound'
                400:
                    $ref: '#/components/responses/badRequest'
    /cards/{code}/subtract:
        post:
            tags: [card]
            summary: Remove card to collection
            requestBody:
                $ref: '#/components/requestBodies/userCard'
            responses:
                200:
                    description: ok
                401:
                    $ref: '#/components/responses/invalidToken'
                404:
                    $ref: '#/components/responses/notFound'
                400:
                    $ref: '#/components/responses/badRequest'

components:
    schemas:
        card:
            properties:
                id:
                    type: string
                    format: uuid
                code:
                    type: string
                elements:
                    type: array
                    items:
                        $ref: '#/components/schemas/cardElement'
                rarity:
                    type: string
                cost:
                    type: string
                power:
                    type: string
                category1:
                    type: string
                category2:
                    type: string
                multicard:
                    type: string
                exBurst:
                    type: string
                name:
                    type: string
                type:
                    type: string
                job:
                    type: string
                text:
                    type: string
                set:
                    type: string
                userCard:
                    type: array
                    items:
                        $ref: '#/components/schemas/userCard'
            example:
                id: 8987518b-f2bb-45e1-bbf7-4e6a35803149
                code: 1-001H
                elements:
                    - element: fire
                rarity: H
                cost: 6
                power: 9000
                category1: X
                category2: I
                multicard: ○
                exBurst: ○
                name: Auron
                type: Avant
                job: Gardien
                text: Lorsqu'Auron inflige des dégâts à votre adversaire, vous pouvez jouer 1 Soutien Feu de votre main sur le terrain dullé.
                set: Opus I
                userCard:
                    - quantity: 10
                      version: classic
                    - quantity: 2
                      version: foil
                    - quantity: 1
                      version: full-art
        user:
            properties:
                id:
                    type: string
                    format: uuid
                firstName:
                    type: string
                    nullable: true
                lastName:
                    type: string
                    nullable: true
                email:
                    type: string
                    format: email
                locale:
                    type: string
                userName:
                    type: string
                authenticationType:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time
            example:
                id: 8987518b-f2bb-45e1-bbf7-4e6a35803149
                firstName: firstName1
                lastName: lastName1
                email: email1@gmail.com
                locale: fr
                userName: userName1
                authenticationType: google
                createdAt: 2020-08-20 23:04:53.935692
                updatedAt: 2020-08-20 23:04:53.935692
        userCard:
            properties:
                quantity:
                    type: interger
                    example: 5
                version:
                    type: string
                    enum: [classic, foil, full-art]
        cardElement:
            properties:
                element:
                    type: string
                    example: 'water'
                id:
                    type: string
                    format: uuid
        idToken:
            properties:
                idtoken:
                    required: true
                    type: string
                    example: eyJhbGciOiJSUz...yLe9LNM85DA
                    description: Google token ID
        error:
            properties:
                message:
                    type: string
                    example: Token expiration date
    requestBodies:
        google:
            description: id token from google oauth
            required: true
            content:
                application/json:
                    example: eyJhbGciOiJSUz...yLe9LNM85DA
                    schema:
                        $ref: '#/components/schemas/idToken'
        userCard:
            description: quantity and version of user card
            required: true
            content:
                application/json:
                    example:
                        quantity: 5
                        version: classic
                    schema:
                        $ref: '#/components/schemas/userCard'
    responses:
        cards:
            description: ok
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            perPage:
                                type: integer
                                example: 15
                            total:
                                type: integer
                                example: 1655
                            page:
                                type: integer
                                example: 2
                            cards:
                                type: array
                                items:
                                    $ref: '#/components/schemas/card'

        card:
            description: ok
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/card'
        user:
            description: ok
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/user'
        invalidToken:
            description: invalid token
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        notFound:
            description: entity not found
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        badRequest:
            description: bad request
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
    parameters:
        authorization:
            in: header
            name: authorization
            schema:
                type: string
                format: bearer
                required: true
                example: bearer eyJhbGciOiJSUz...yLe9LNM85DA
        search:
            in: query
            name: search
            schema:
                type: string
                required: false
                example: sephiroth
        page:
            in: query
            name: page
            schema:
                type: integer
                required: false
                example: 1
        perPage:
            in: query
            name: perPage
            schema:
                type: integer
                required: false
                example: 50
        owned:
            in: query
            name: owned
            schema:
                type: bool
                required: false
                example: true
        types:
            in: query
            name: types
            schema:
                type: string
                required: false
                example: 'Avant,Soutien,Invocation,Monstre'
        elements:
            in: query
            name: elements
            schema:
                type: string
                required: false
                example: 'fire,ice,wind,earth,lightning,water,light,dark'
        opus:
            in: query
            name: opus
            schema:
                type: string
                required: false
                example: 'Opus_I,Opus_II,Opus_III,Opus_IV,Opus_V,Opus_VI,Opus_VII,Opus_VIII,Opus_X,Opus_IX,Opus_XI,Opus_XII,Opus_XIII,Boss_Deck_Chaos'
        rarities:
            in: query
            name: rarities
            schema:
                type: string
                required: false
                example: 'C,R,H,L,S,P,B'
        categories:
            in: query
            name: categories
            schema:
                type: string
                required: false
                example: 'I,II,IV,III,VI,V,VII,VIII,X,IX,XI,XII,XIV,XIII,XV,XVI,FFL,FFT,FFE'
        cost:
            in: query
            name: cost
            schema:
                type: string
                required: false
                example: '2,8'
                description: Range of costs
        power:
            in: query
            name: power
            schema:
                type: string
                required: false
                example: '4000,13000'
                description: Range of power